{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Fusion",

  "scopeName": "text.html.fusion",
  "injections": {
    "L:meta.tag": {
      "patterns": [
        {
          "include": "#afx-tagStuff"
        }
      ]
    }
  },

  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#prototype-definition"
    },
    {
      "include": "#include"
    },
    {
      "include": "#property-definition"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.block.fusion",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.fusion"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.fusion"
            }
          }
        },
        {
          "begin": "(^[ \t]+)?(?=//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.fusion"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "name": "comment.line.double-slash.fusion",
              "begin": "//",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.fusion"
                }
              },
              "end": "\n"
            }
          ]
        },
        {
          "begin": "(^[ \t]+)?(?=#)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.fusion"
            }
          },
          "end": "(?!\\G)",
          "patterns": [
            {
              "name": "comment.line.hash.fusion",
              "begin": "#",
              "beginCaptures": {
                "0": {
                  "name": "punctuation.definition.comment.fusion"
                }
              },
              "end": "\n"
            }
          ]
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.fusion",
          "match": "\\b(<|>|=)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.fusion",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.fusion",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.fusion",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.fusion",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "prototype-definition": {
      "begin": "(prototype)\\(",
      "end": "\\)",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.fusion"
        }
      },
      "patterns": [
        {
          "include": "#object-name"
        }
      ]
    },
    "expression": {
      "begin": "(\\$\\{)",
      "end": "(\\})",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.fusion"
        }
      },
      "endCaptures": {
        "1": {
          "name": "keyword.other.fusion"
        }
      },
      "patterns": [
        {
          "include": "source.js#expression"
        }
      ]
    },
    "preprocessor": {
      "patterns": [
        {
          "begin": "(afx)(`)",
          "beginCaptures": {
            "1": {
              "name": "support.function.fusion"
            },
            "2": {
              "name": "string.quoted.other"
            }
          },
          "end": "(`)",
          "endCaptures": {
            "1": {
              "name": "string.quoted.other"
            }
          },
          "contentName": "meta.embedded.block.html",
          "patterns": [
            {
              "include": "text.html.derivative"
            }
          ]
        },
        {
          "name": "string.quoted.other.fusion",
          "begin": "([a-zA-Z_-]+)`",
          "beginCaptures": {
            "1": {
              "name": "support.function.fusion"
            }
          },
          "end": "(`)"
        }
      ]
    },
    "property-path": {
      "patterns": [
        {
          "begin": "(@[\\w\\d:_\\-]+)|([\\w\\d:_\\-]+)|('.*?')|(\".*?\")",
          "beginCaptures": {
            "1": {
              "name": "entity.other.attribute-name.fusion"
            },
            "2": {
              "name": "variable.other.fusion"
            },
            "3": {
              "name": "string.quoted.single.fusion"
            },
            "4": {
              "name": "string.quoted.double.fusion"
            }
          },
          "end": "\\G",
          "patterns": [
            {
              "match": "\\."
            },
            {
              "include": "#prototype-definition"
            },
            {
              "include": "#strings"
            }
          ]
        }
      ]
    },
    "property-definition": {
      "patterns": [
        {
          "include": "#property-path"
        },
        {
          "begin": "=\\s*",
          "end": "(?!\\G)",
          "patterns": [
            {
              "include": "#preprocessor"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#expression"
            },
            {
              "include": "#boolean-literal"
            },
            {
              "include": "#null-literal"
            },
            {
              "include": "#numeric-literal"
            },
            {
              "include": "#object-name"
            }
          ]
        }
      ]
    },
    "object-name": {
      "patterns": [
        {
          "match": "[a-zA-Z0-9.:]+",
          "name": "entity.name.type.fusion"
        }
      ]
    },
    "boolean-literal": {
      "patterns": [
        {
          "match": "(TRUE|FALSE|true|false)",
          "name": "constant.language.fusion"
        }
      ]
    },
    "numeric-literal": {
      "patterns": [
        {
          "match": "-?\\d+(\\.\\d+)?",
          "name": "constant.numeric.fusion"
        }
      ]
    },
    "null-literal": {
      "patterns": [
        {
          "match": "(NULL|null)",
          "name": "constant.other.fusion"
        }
      ]
    },
    "include": {
      "patterns": [
        {
          "match": "^(include):\\s*(.*)\\s*$",
          "captures": {
            "1": {
              "name": "keyword.other.fusion"
            },
            "2": {
              "name": "string.unquoted"
            }
          }
        }
      ]
    },

    "afx-tagStuff": {
      "patterns": [
        {
          "begin": "(\\{)",
          "end": "(\\})",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.fusion"
            }
          },
          "endCaptures": {
            "1": {
              "name": "keyword.other.fusion"
            }
          },
          "patterns": [
            {
              "include": "source.js#expression"
            }
          ]
        }
      ]
    }
  }
}
